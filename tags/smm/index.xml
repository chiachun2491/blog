<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>smm on Jeffery's Blog</title><link>https://blog.jefferyho.cc/tags/smm/</link><description>Recent content in smm on Jeffery's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 17 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jefferyho.cc/tags/smm/index.xml" rel="self" type="application/rss+xml"/><item><title>Query Modeling</title><link>https://blog.jefferyho.cc/p/ir-homework5/</link><pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jefferyho.cc/p/ir-homework5/</guid><description>Kaggle competitions 2020: Information Retrieval and Applications
Homework 5: Query Modeling
https://www.kaggle.com/c/2020-information-retrieval-and-applications-hw5
Github code https://github.com/chiachun2491/NTUST_IR/tree/master/homework5
Homework report 使用的 tool Python, numpy, pandas, collections.Counter, scipy.sparse, numba.jit, datetime
資料前處理 將 doc_list.txt, query_list.txt 讀檔進來後，之後將每個 doc 和 query 使用 collections.Counter 儲存。 生成 document 和 query 的 tf-idf Lexicon 生成方式：使用 df 範圍（5 ~ 10000）的單字，過濾一些 stop word 和稀少的單字。 在 c(w,d), c(w,q) 使用 sublinear_tf，並先計算好 document 和 query 的 unigram language model，也先計算好 background language model。 作業流程 使用 vsm 做為第一次檢索的結果去做 rocchio，再將 rocchio 最好的結果作為 smm relevant document，下去做 smm</description></item></channel></rss>