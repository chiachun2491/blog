[{"content":" 臺灣科技大學資訊工程系 109學年度第二學期 ( 2021/2/24 - 2021/6/23 ) 課程名稱：人工智慧與邊緣運算實務 課程代號：CS5149701 課程講師：許哲豪 (Che-Hao,Hsu / Jack Hsu) 博士 【課程說明】  摘要說明 透過照片或影片畫面辨識出車牌號碼後，可以用於檢查自定義的違規車牌資料庫內是否有該違規車牌，以達到檢測違規車輛之用途。\n系統簡介 創作發想 常常看到路邊的停車格計費員在進行收費，利用手上的計費機辨識出車牌後開收費單，因此想到如果還可以搭配檢查該車牌是否為違規車輛，讓計費員可以通報後進行後續處置。\n硬體架構 目前設計可以輸入照片或是影片做為分析，使用 Google Colab 進行自定義車牌偵測模型訓練，並於 Google Colab 上進行照片、影片推論。\n原先有要嘗試在樹莓派 (Raspberry Pi) 進行推論，由於後來疫情關係沒找到鏡頭因此沒在樹莓派上嘗試。\n工作原理及流程 推論的流程共分為三部分，分別為「車輛偵測」－「車牌偵測」－「車牌 OCR」。\n接收到輸入的影像後，會先使用預訓練的 yolo-v4 coco 偵測出畫面上的車輛（汽車、摩托車），再使用自己另外訓練的自定義的車牌偵測資料集偵測出車牌位置後，再使用 tesseract 在車牌位置上進行 OCR 辨識。\n 車牌辨識推論流程示意圖 \n資料集建立方式 總共使用論文提供的資料集以及自己另外收集的資料集：\n論文資料集 Application Oriented License Plate(AOLP) Database1: http://aolpr.ntust.edu.tw/lab/index.html\n該資料集共有三種分類，如下圖由左至右分為：\n Access Control (AC) Road Patrol (RP) Traffic Law Enforcement (LE)   AC, RP, LE (AOLP Datasets) \n另外收集的資料集 我有另外自行收集行車記錄器的影片截圖來仿造 AOLP 資料集（如下圖），與 AOLP 資料集比較不同的點是：\n 目前有些車牌為 7 碼，AOLP 的都是 6 碼不知道會不會有影響 另外原資料集的部分都是汽車車牌截圖，我自行產生的部分有一半是機車車牌截圖   機車車牌截圖 \n模型選用與訓練  車輛偵測： 直接採用了 yolov4 預訓練的 COCO 資料集模型，用於偵測出畫面上的汽車、機車位置。 車牌偵測： 這邊我們使用 yolov4-tiny 自定義上述的資料集，使用 darknet 對資料集進行訓練及推論。 車牌 OCR 辨識： 使用 tesseract 作為 OCR 辨識模型，在車牌偵測的模型後得到車牌位置後，將車牌圖片進行OCR辨識得到車牌字元。  下圖為車牌偵測模型的訓練過程損失(Loss)及類別平均精確度(mAP)變化圖\n 訓練過程損失(Loss)及類別平均精確度(mAP)變化圖 \n實驗結果 成果展示說明 由於疫情期間，因此不便外出拍攝街道停車格影片，因此這邊使用從網路上找到的行車記錄器影片來做測試範例：\n如下圖我們可以看到我們訓練出的模型可以很正確的框出車牌的位置，另外在我們自定義的違規車牌列表中，也有偵測到違規的車牌號碼，在繪製結果圖時，程式也會將違規車牌號碼顯示在畫面上。\n 模型實際偵測結果 \n原先一開始打算直接用資料集訓練車牌偵測模型，但是在實際測試的過程中發現由於資料集都是直接輸入只有車子的畫面，並沒有像行車記錄器那樣的廣角視角，因此才會先多用一層 COCO 模型去先找出汽車、機車的位置，但也有因此減慢了在推論過程中的速度。\n改進與優化 這邊提出兩個後續改進的方向：\n合併 COCO 和 自定義車牌偵測 模型 應該可以先用目前的推論流程在偵測出車牌位置後，另外收集成新的資料集來重新訓練一個新模型，應該就可以減少兩層模型的推論時間。\n車牌清晰化 在推論影片的過程中也有發現畫面在移動的過程中，常常會遇到模糊的問題，這邊或許可以參考網路上的做法，訓練出基於 GAN 的模型，將模糊不清的車牌經過模型後變清楚\n比較與測試 這邊原先預計使用 OpenVINO 釋出的車牌偵測模型 vehicle-license-plate-detection-barrier-0106 來作為車牌偵測的比較對象，但經過測試後發現該模型貌似並不支援台灣的車牌。\n 測試圖像 \n結論 經過測試後可以發現訓練的模型可以正確地找到車牌的位置，但在 OCR 的部分常因為畫面模糊而導致 OCR 辨識不良，後續可以透過修改影像強化或是額外訓練模型來做改善。\n參考文獻  許哲豪 - 如何以Google Colab及Yolov4-tiny來訓練自定義資料集─以狗臉、貓臉、人臉偵測為例 Github - AlexeyAB/darknet iThome - Day26-聽過 OCR 嗎? 實作看看吧 – pytesseract  附錄 Colab源碼  自定義車牌偵測模型訓練程式碼  測試推論結果範例程式碼   資料集及標註檔 由於車牌某部分也是屬於個資的部分，這邊提供我自己收集的部分資料集作為訓練範例，且僅作為學術研究使用，不得用於其他用途，已經將訓練集和驗證集的影像和標註檔分別放置在 yolo_train, yolo_valid 資料夾中。\n\n  G. Hsu, J. Chen and Y. Chung, \u0026ldquo;Application-Oriented License Plate Recognition,\u0026rdquo; in IEEE Transactions on Vehicular Technology, vol. 62, no. 2, pp. 552-561, Feb. 2013, doi: 10.1109/TVT.2012.2226218. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2021-06-23T00:00:00Z","image":"https://blog.jeffery.tk/p/edge-plate-detection/BNgrLe5_huf738ae938586e2523874cb2afd528823_128500_120x120_fill_box_smart1_2.png","permalink":"https://blog.jeffery.tk/p/edge-plate-detection/","title":"利用車牌辨識以檢測違規車牌"},{"content":" Zhou, Xinyi \u0026amp; Wu, Jindi \u0026amp; Zafarani, Reza. (2020). SAFE: Similarity-Aware Multi-Modal Fake News Detection.\n Introduction Fake News Detection 假新聞（故意且可驗證虛假的新聞文章）通常包含文本和視覺的資訊，現有的基於內容的假新聞檢測方法不是只考慮文本信息，就是結合兩種類型的數據而忽略關係（相似性）。 作者認為在判斷假新聞的任務上，理解這種關係（相似性）以預測假新聞的價值有兩個方面。\nRelationship (similarity) for predicting fake news 一些假新聞（或可信度低的新聞）為了吸引公眾注意力，更喜歡使用戲劇性、幽默（滑稽）和誘人的圖像，其內容與新聞文本中的實際內容相去甚遠。\n所以當一篇假新聞文章講述一個帶有虛構場景或陳述的故事時，是很難找到相關的和未經處理的圖像來匹配這些虛構的內容，因此當創作者使用未經處理的圖像來支持非事實的場景或陳述時，假新聞的文本和視覺信息之間是存在「差距」的。\n Miscaptioned Definition   Examples at https://www.snopes.com/fact-check/rating/miscaptioned/ \nSimilarity-Aware FakE news detection method (SAFE) SAFE 由三個模塊組成：\n 多模態（文本和視覺）特徵提取 模態內（模態獨立）假新聞預測 跨模態相似度提取   SAFE Framework overview \n對於每篇新聞文章，會用神經網絡自動獲取其文本和影像的潛在表達式，並且計算出它們之間的相似性後，聯合學習新聞文本和視覺的表達式及相似性來預測假新聞。\n作者所提出的方法主要的目的在識別新聞文章在其文本或圖像上的虛假性，或文本和圖像之間的不匹配。\nContributions 本文是第一個提出藉由觀察新聞文本和視覺信息之間的關係（相似性）在辨識假新聞任務上，文中提出了一種聯合利用多模態（文本和視覺）和之間的相似性來學習新聞文章的表達式並預測假新聞的方法。\nMethodology Problem Definition and Key Notation  Given a news article $A = {T, V }$ ( $T = $ text information, $V = $ visual information) Denote $t,v \\in \\mathbb{R}^d$ as corresponding representations, $t = M_t(T, \\theta_t), v=M_v(V, \\theta_v)$ Let $s = M_s(t, v)$ denote the similarity between $t$ and $v$ , where $s \\in [0, 1]$ Goal: $M_p: (M_t, M_v, M_s) \\overset{(\\theta_t, \\theta_v, \\theta_p)}{\\longrightarrow} \\hat{y} \\in [0,1]$, where $\\theta_*$ are parameters to be learned  Determine whether $A$ is fake news $(\\hat{y} = 1)$ or true one $(\\hat{y} = 0)$. By investigating its textual, visual information, and their relationship.    Feature Extraction Text 在新聞文本的部分 SAFE 透過引入額外的全連接層來擴展 Text-CNN 來提取每篇新聞文章的文本特徵。\n Text-CNN \nImage 首先使用預訓練的 image2sentence 模型將新聞內容中的圖像轉換成文字訊息後，同樣使用和處理文字相同的 Text-CNN 來提取特徵。\n image2sentence example (source: https://github.com/nikhilmaram/Show_and_Tell ) \n跟目前的多模態假新聞檢測研究相比，大部分的方法通常直接應用預訓練的 CNN 模型（例如 VGG）來獲取新聞圖像的表達式，而本文為了要計算跨模態的相似性時，所以使用 image2sentence 將圖像先轉為文字來保持一致性。\nModal-independent Fake News Detection 為了在預測假新聞時正確表示新聞文本和視覺信息，我們的目標是將提取的新聞內容的文本和視覺特徵正確地映射到為假新聞的機率，並進一步映射到它們的實際標籤。\n計算假新聞機率公式為\n$$M_p(t,v) = 1 \\dot{ } \\text{softmax}(W_p(t \\oplus v)+b_p) $$\n其中 $1 = [1,0]^T$, $W_p \\in \\mathbb{R}^{2 \\times 2d}$ 和 $b_p \\in \\mathbb{R}^{2}$ 是要被訓練的參數。\nCross-entropy-based （交叉熵） loss function:\n$$L_p(\\theta_t, \\theta_v, \\theta_p) = -\\mathbb{E}_{(a,y) \\sim (A,Y)}(y \\log M_p(t,v) + (1-y)\\log(1-M_p(t,v)))$$\nCross-modal Similarity Extraction 大多數的方法都是分開處理不同的模態特徵 $(t, v)$，只是將它們連接起來，並沒有觀察它們之間的關係。然而作者提到說除此之外，還可以通過評估文本信息與其視覺信息的（非）相關性來檢測新聞文章的虛假性。\n假新聞創作者有時會主動使用不相關的圖像進行虛假陳述以吸引讀者的注意力，或者由於難以找到支持的非造假圖像而被迫使用它們，與提供相關文本和視覺信息的真實新聞文章相比，那些文本和圖像不相關的文章更有可能是假的。\n作者這邊稍微修改餘弦相似度，定義新聞文本和視覺信息之間的相關性如下：\n$$M_s(t,v) = \\frac{t \\cdot v + |t||v| }{2 |t||v| } $$\n讓 $M_s(t,v)$ 的值為正數且 $\\in [0,1]$，$M_s(t,v) \\to 0$ 表示 $t, v$ 相差甚遠，$M_s(t,v) \\to 1$ 表示 $t, v$ 幾乎相同。\n假設從純相似性角度分析時，與文本和圖像匹配的新聞文章相比，文本和視覺信息不匹配的新聞文章更可能是假的，定義 Cross-entropy-based （交叉熵） loss function：\n$$L_S(\\theta_t, \\theta_v) = -\\mathbb{E}_{(a,y) \\sim (A,Y)}(y \\log (1-M_s(t,v)) + (1-y)\\log M_s(t,v))$$\nModel Integration and Joint Learning 在檢測假新聞時，我們的目標是透過文本、視覺信息和它們之間的關係去正確識別假新聞。\n因此定義最終 loss function：\n$$L(\\theta_t, \\theta_v, \\theta_p) = \\alpha L_p(\\theta_t, \\theta_v, \\theta_p) + \\beta L_s(\\theta_t, \\theta_v)$$\n$$L_p(\\theta_t, \\theta_v, \\theta_p) = -\\mathbb{E}_{(a,y) \\sim (A,Y)}(y \\log M_p(t,v) + (1-y)\\log(1-M_p(t,v)))$$\n$$L_S(\\theta_t, \\theta_v) = -\\mathbb{E}_{(a,y) \\sim (A,Y)}(y \\log (1-M_s(t,v)) + (1-y)\\log M_s(t,v))$$\nOptimization  SAFE Optimization Algorithm   SAFE Update Equations \nExperiments Setup Dataset FakeNewsNet\n PolitiFact (politifact.com) (2002.05 ~ 2018.07) 美國政治聲明和報告的非營利性事實核查網站。 GossipCop (gossipcop.com) (2000.07 ~ 2018.12)\n對雜誌和報紙上發表的名人報導和娛樂故事進行事實核查。   Data Statistics https://github.com/KaiDMML/FakeNewsNet \nBaselines  文本 (LIWC)：廣泛接受的心理語言學詞典 視覺（VGG-19）：使用微調的 VGG-19 作為基線之一 多模態信息（att-RNN）： 使用帶有注意力機制 (Attention) 的 LSTM 和 VGG-19 來融合新聞文章的文本、視覺和社交平台特徵。 （為了公平，排除社交資訊） SAFE\\T：不使用文本信息 SAFE\\V：不使用視覺信息 SAFE\\S：不捕捉文本和視覺特徵之間的關係（相似性）。 在這種情況下，每個新聞的特徵通過連接它們來融合 SAFE\\W：僅評估文本和視覺信息之間的關係。 在這種情況下，分類器與跨模態相似性提取模塊的輸出直接相連。  Performance Analysis  Performance of Methods in Detecting Fake News \n 根據兩個數據集的準確度值和 F1 分數，SAFE 的表現優於所有 baseline。 在 PolitiFact 上，準確度排序：SAFE（多模態）\u0026gt; att-RNN（多模態）$\\approx$ ￼LIWC（文本）\u0026gt; VGG-19（視覺） 在 GossipCop 上，準確度排序： SAFE（多模態）\u0026gt; VGG-19（視覺）\u0026gt; att-RNN（多模態）\u0026gt; LIWC（文本）  Module Analysis  SAFE 在所有變體中表現最佳， 使用多模態信息（SAFE\\S 或 SAFE\\W）比使用單模態信息（SAFE\\T 或 SAFE\\V）表現更好 獨立使用多模態信息（SAFE\\S）或挖掘它們之間的關係（SAFE\\W）來檢測假新聞兩者的準確度是可比的 文本信息（SAFE\\V）比視覺信息（SAFE\\T）更重要   Module Analysis   Parameter Analysis \nParameter Analysis α 和 β 用於分配多模態特徵 (α) 和跨模態的相似性 (β) 之間的相對重要性，準確度範圍 0.75~0.85，F1 範圍 0.8~0.9。\n在兩個資料集上 α 和 β 的最佳比例也不同，這再次驗證了多模態信息和跨模態關係在預測假新聞中的重要性：\n PolitiFact: α : β = 0.4 : 0.6 GossipCop: α : β = 0.6 : 0.4  Case Study 這邊作者提出兩個問題：\n 是否存在任何真實世界的假新聞故事，其文本和視覺信息彼此之間沒有密切關聯？ 如果存在，SAFE 能否正確識別這種無關性並進一步識別其虛假性？  為此，作者瀏覽了兩個數據集中的新聞文章，並將它們的真實標籤 (ground truth) 與 SAFE 計算的相似度得分進行了比較。\n一些虛構故事存在文本和視覺信息之間的差距可歸類為（但不限於）兩個原因：\n  這樣的故事很難得到未經處理的圖像的支持：\n在 Fig.5 (a) 中，實際上沒有與投票和賬單相關的圖像。在與真正親密關係的情侶 Fig.6 (c) 相比，假情侶往往很少有合影或使用拼貼畫 Fig.5 (c)。\n  使用有吸引力但不密切相關的圖像可以幫助增加新聞流量：\nFig.5 (b) 中的假新聞包括一張與死亡故事相衝突的微笑人物圖像\n   Fake/True News Examples \nSAFE 有助於正確評估新聞文本和視覺信息之間的關係（相似性）。\n對於 Fig.5 中的假新聞，它們的相似度得分 $s$ 都很低，SAFE 正確地將它們標記為假新聞。 類似地，SAFE 為 Fig.6 中的所有真實新聞故事分配了高相似度分數 $s$ ，並將它們預測為真實新聞。\nConclusions  本文針對假新聞檢測任務提出了一種相似性感知 (similarity-aware) 的多模態方法 SAFE。 該方法提取新聞內容的文本和視覺特徵，並觀察它們之間的關係。 實驗結果表明，多模態特徵和跨模態關係（相似性）在假新聞檢測中具有相當的重要性。  Comments  Add across-modal relationship (similarity) to detect fake news detection Use image2sentence get image caption  Modify cosine similarity equation   Baseline:  Text feature baseline only one of traditional method Multi-modal baseline only one to compared   ","date":"2021-06-17T00:00:00Z","image":"https://blog.jeffery.tk/p/fake-news-detection-safe/image-20210715181436622_hu1fe59100f806a3b1884406926f185a64_1483991_120x120_fill_box_smart1_2.png","permalink":"https://blog.jeffery.tk/p/fake-news-detection-safe/","title":"Similarity-Aware Multi-Modal Fake News Detection"},{"content":" 論文名稱： A CNN-Based Human Head Detection Algorithm Implemented on Edge AI Chip 論文來源： ICSSE 2020 論文連結： https://doi.org/10.1109/ICSSE50014.2020.9219260 論文關鍵字： CNN、人頭檢測、Edge AI晶片   簡介 近年來進行人頭檢測的許多方法都是使用 CNN (Convolutional Neural Network) 進行，但大多數的方法為了追求高準確率，通常都會增加網路的layer的層數或是增加網路的權重，導致計算量增大以及硬體需求增加。\n相對的，使用整合好的 CNN IC 晶片可以得到更好功耗及計算速度，本文使用由 視芯公司（AVSdep） 的Mipy (Micropython) 開發板（AVS05P-S），搭配 CNN IC (AI860) 及視芯提供的訓練工具進行模型的訓練。\n Mipy 開發板外觀（圖片來源： https://ieeexplore.ieee.org/document/9219260 ）   Mipy 開發板應用架構圖（圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n前置相關工作 訓練工具 作者使用由公司提供的訓練工具（C++ 版本）1：\n 建立資料庫（Create database tool） 將訓練圖片編碼成二進制檔案以加速訓練時間 推論工具（Inference tool） 捕獲各種來源的影像並進行資料擴充（擴充細節請看下節） 訓練工具（Training tool） 執行訓練循環（前向傳播、後向傳播、損失計算、權重優化）  影像資料擴充 為了要增加模型的準確度以及避免模型過擬合（Overfitting），資料集需要大量且多樣化，因此進行資料擴增：\n 旋轉圖片 (Rotation) 亮度調整 (Brightness adjustment) 藉由調整圖片像素來進行亮度調整：  (1) $P_{new} = P_{old} \\times a$ (2) $P_{new} = P_{old} + b$ (1) (2) 可以同時進行   模糊處理 (Blurring image) 隨機模糊或是銳利化圖片 鏡像處理 (Mirroring image) 替換背景 (Background replacement) 將原始圖片中固定的背景顏色替換成隨機的風景圖  Mipy 運算過程  Mipy 運算過程流程圖（圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n作者拍攝了一些人作為資料集，總共 8 個身體方向，而每個身體方向都包含 5 個頭部方向，分別為：向上、向後、向左、向右、向前，總共拍攝了 800 多張照片，將這些照片分成三個類別，分別為：前面、後面、側面。  (a) 前面 Front View (b) 後面 Back View (c) 側面 Side View （圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n為了增加資料集的多樣性，作者使用推論工具進行資料擴增（如前面章節說明），將圖片數從800多張擴增到總共 120,000 章圖片，分成 108,000 張圖片為訓練集，12,000 張圖片為測試集，擴增參數設定如表 1。\n 資料擴增使用方法及參數（圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n而每次建立資料庫時使用 30,000 張照片作為訓練集資料，3,000 張照片作為測試集資料，並設定輸出神經元類型：\n   編號 輸出表示     0 正樣本偵測   1-4 類別樣本（其中兩個用來標示前、後、側面）\n(+1, +1): 前面\n(+1, -1): 後面\n(-1, -1): 側面   5 負樣本偵測   6-9 邊界框位置回歸    模型超參數如下所示：\n Optimizer: Adam Batch size: 250 Learning rate: 0.0001 Weight decay: 0.0001 Recreate database every 30 epoch  訓練流程使用批次檔進行：\n 執行建立資料庫工具 執行訓練工具 讀取紀錄訓練工具的 log  上述步驟進行 3 次後，產生 G0 做為預訓練模型，不過從下圖可以發現訓練誤差遠低於測試誤差。\n G0 Train/Test Loss （圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n因此作者把在風景照中的 False Positive Data（被偵測為人頭但是實際上不是人頭的圖像）是為新的負樣本資料，加入訓練資料中增加模型準確度。\n並設定閥值（Threadshold）來找出需要額外再訓練的圖片，公式如下： $$S = N_0 - N_5$$\n $N_0$: 正樣本信心分數 $N_5$: 負樣本信心分數  這邊訓練的過程就是使用預訓練時的批次檔作為訓練循環，直到大多數的負樣本時將停止訓練，第一次訓練完的模型稱為 G1，作者提到說驗證 G1 的過程中發現許多 False Positive Data，經過重複進行修正和訓練後，第二次訓練完成的模型稱為 G2，以此類推，在 G4 檢測到的 False Positive Data 已經很少，但準確度依舊只有 58.9%，判斷為 overfitting，因此作者決定增加其他訓練資料。  G1, G2, G3, G4 Train/Test Loss （圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n這邊增加的資料為 Label Face in the Wild (LFW)2，挑選的標準為照片中只能出現一個人，以及臉部不可以被其他東西覆蓋，經過篩選後共 9,131 張照片被挑選，其中 1/4 作為測試集，剩餘資料作為訓練集使用。\n Label Face in the Wild (LFW) 資料示意 （圖片來源： http://vis-www.cs.umass.edu/lfw/#information ） \n加入 LFW 訓練後，訓練出了 G5、G6 兩個模型，準確率也分別到達 65.1% 和 70.1%。\n G5, G6 Train/Test Loss （圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n實驗結果與分析 將訓練好的模型載入到 AI860 後， Mipy 開發板可以執行人頭偵測任務（如下圖所示）。  實時系統應用畫面（圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n作者也分析了加入 LFW 前後的比較差異，如下表 3、4 所示，我們可以發現準確率提升了 6 %，但是上升幅度並不夠明顯，於是將各種類別（前、後、側面）的資料拆開檢視後發現正面的準確度遠高於側面與後面（如下表 G5/G6 Front View），作者研判原因是因為加入的 LFW dataset 都是正面臉部的關係，導致資料不平衡的情況發生。  G4, G5 Confusion Matrix （圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n G5, G6 Front View Only Confusion Matrix （圖片來源： https://ieeexplore.ieee.org/document/9219260 ） \n結論 本文利用的視芯公司（AVSdep）提供的訓練工具訓練出模型後，部署在開發板及 CNN IC 晶片上後，可以順利執行人頭辨識的任務（Human Head Detection）。其中訓練完的模型正面臉部的準確率可以達到 98.7%，模型應用在實時的檢測系統上也足夠準確，使用完整的訓練資料時，Mipy 開發板可以獲得足夠的準確率以執行實際應用。\n個人心得 筆者覺得這篇論文有點像是視芯公司的業配文，主要實作細節並沒有闡述太多關於 CNN IC 晶片網路架構的部分，另外在 G1 ~ G4 的訓練過程中，testing loss 也都並沒有下降，感覺 False Positive Correction （誤報修正）並沒有太大作用，加入 LFW 後才有明顯改善，但效果仍然有待加強，後文在分析準確率上升問題時，很可惜的並沒有看到像是 G4 (Front View) 或是 G5 Back/Side View 的 Confusion Matrix 來做比較，導致只能聽從作者分析結論並沒有實驗數據參佐。\n  Advance Video System CO., LTD (AVSdsp), AI courses, requirements, tool updates, Q\u0026amp;A area: CNN Tool v0.0.1.2c, Available: http://www.avsdsp.com/AI_Data.html \u0026#x21a9;\u0026#xfe0e;\n G. B. Huang, M. Mattar, T. Berg, and E. Learned-Miller, “Labeled faces in the wild: A database for studying face recognition in unconstrained environments,” Technical Report, University of Massachusetts, Amherst, Oct. 2007. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2021-04-20T00:00:00Z","permalink":"https://blog.jeffery.tk/p/edge-cnn-human-head/","title":"A CNN-Based Human Head Detection Algorithm Implemented on Edge AI Chip"},{"content":"Kaggle competitions  2020: Information Retrieval and Applications\nHomework 5: Query Modeling\nhttps://www.kaggle.com/c/2020-information-retrieval-and-applications-hw5\n Github code  https://github.com/chiachun2491/NTUST_IR/tree/master/homework5\n Homework report 使用的 tool Python, numpy, pandas, collections.Counter, scipy.sparse, numba.jit, datetime\n資料前處理  將 doc_list.txt, query_list.txt 讀檔進來後，之後將每個 doc 和 query 使用 collections.Counter 儲存。 生成 document 和 query 的 tf-idf Lexicon 生成方式：使用 df 範圍（5 ~ 10000）的單字，過濾一些 stop word 和稀少的單字。 在 c(w,d), c(w,q) 使用 sublinear_tf，並先計算好 document 和 query 的 unigram language model，也先計算好 background language model。  作業流程 使用 vsm 做為第一次檢索的結果去做 rocchio，再將 rocchio 最好的結果作為 smm relevant document，下去做 smm\nRocchio 模型參數調整 (homework5_rocchio.py)   $TF:\\begin{cases} 0 \u0026amp; \\text{ if } tf=0 \\ 1 + log(tf)\u0026amp; \\text{ if } tf\u0026gt;=1 \\end{cases} \\ \\ IDF: log(\\frac{1 + N}{1 + df_{i}}) + 1$\n  $Rocchio: \\vec{q} = \\alpha \\cdot \\vec{q} + \\beta \\cdot \\frac{1}{\\left | R_{q} \\right |} \\cdot \\left ( \\sum_{d_{j}\\in R_{q}} \\vec{d_{j}} \\right ) - \\gamma \\cdot \\frac{1}{\\left | \\bar{R_{q}} \\right |} \\cdot \\left ( \\sum_{d_{{j}'}\\in \\bar{R_{q}}} \\vec{d_{{j}'}} \\right )$\n  最終使用參數（Kaggle Public Score: 0.54248）：\n alpha = 1 / beta = 0.5 / gamma = 0.15 / rele_doc = 5 / nrele_doc = 1 / epoch = 5    Simple Mixture Model 參數調整 (homework5_smm.py)   $KL(q||d_{j}) \\propto - \\sum_{w\\in V} P(w|q)logP(w|d_{j})$\n  $P(w|q) = \\alpha \\times P_{ULM}(w|q) + \\beta \\times P_{SMM}(w|q) + (1 - \\alpha -\\beta ) \\times P_{BG}(w)$\n  $P(w|d_{j}) = \\gamma \\times P_{ULM}(w|d_{j}) + (1 - \\gamma ) \\times P_{BG}(w) $\n  最終使用參數（Kaggle Public Score: 0.59390）：\n alpha = 0.1 / beta = 0.85 / gamma = 0.2 / rele_doc = 5 / epoch = 50 / smm_alpha = 0.6    各種 model 的分數表現    Model Name Parameter Kaggle Public MAP@5000 Note     VSM (TF-IDF) smooth_idf, sublinear_tf 0.41864 取全部的單字   VSM (TF-IDF) smooth_idf, sublinear_tf 0.42399 只取 query 出現過的單字   BM25 K1=0.8, K3=1000, b=0.7 0.48936    Rocchio a=1, b=0.5, g=0.15, reledoc=5, nreledoc=1, epoch=5 0.52744 取全部的單字   Rocchio a=1, b=0.5, g=0.15, reledoc=5, nreledoc=1, epoch=5 0.54248 取 df \u0026gt;= 5 的單字   SMM smm_a=0.3, reledoc=5, epoch=50, a=0.15, b=0.8, g=0.3 0.57964 取 df \u0026gt;= 5 的單字   SMM smm_a=0.6, reledoc=5, epoch=50, a=0.1, b=0.85, g=0.2 0.59390 取 10000 \u0026lt;= df \u0026gt;= 5 的單字    模型運作原理 query model 主要是要解決 query 的資訊量過少的問題，像 rocchio 就是將 query 的向量加上了相關的文件向量也去除了一些些不相關文章向量，讓 query vector 能夠涵蓋更多資訊，SMM 則是透過 training P_smm 和 P_bg 讓更多特定的單字（在 background model 中沒有辦法被找到的單字）能夠在 P_smm 中的機率提高，提升 query model 的判別力。\n個人心得 \u0008　這次作業一開始寫的時候原本以為會很簡單，想說直接挑戰實作 SMM，結果馬上被單字量嚇到，一開始也做不出來，所以就轉戰 rochhio，但是發現用第一次作業的 VSM 都沒有過 baseline，後來想說先用 sklearn 的 tfidfvectorizer 跑跑看，發現有 sublinear_tf 這個參數可以調整用來縮減 document 長度的問題，發現可以過 baseline，就趕快把公式套上去，這次作業也重做的第一次作業的 VSM，上次作業知道 sparce matrix 後，發現在 VSM 實作效率超級高，後來嘗試去掉一些出現次數較少的單字也有提升一些分數，沒嘗試太多組參數就開始做 SMM，因為這次 VSM 有重做的關係，在前處理建 unigram 和 background \u0008model 的時候都比上次 PLSA 的效率快多啦，後面就開始調整 SMM 的參數，然後到了一個瓶頸後又把目前最高分的結果當作 relevant feedback，的確也有再進步，但後面要再用同一個方法的時候就往下掉了一些，調參數的過程中也好擔心 private 的成績會掉超多的 QQ。\n","date":"2020-12-17T00:00:00Z","permalink":"https://blog.jeffery.tk/p/ir-homework5/","title":"Query Modeling"},{"content":"Kaggle competitions  2020: Information Retrieval and Applications\nHomework 4: PLSA\nhttps://www.kaggle.com/c/2020-information-retrieval-and-applications-hw4-v2\n Github code  https://github.com/chiachun2491/NTUST_IR/tree/master/homework4\n Homework report 使用的 tool Python, Jupyter, numpy, pandas, collections.Counter, scipy.sparse, numba.jit, datetime\n資料前處理  將 doc_list.txt, query_list.txt 讀檔進來後，之後將每個 doc 使用 collections.Counter 儲存到 dict，每個 query 都使用 split() 儲存到 dict。 這次 Lexicon 的生成方式跟之前不一樣，之前在生成 Lexicon 時只看 query_list 的所有單詞，這次先將 doc 和 query 出現過的詞加入 Lexicon 並先計算好 document length, c(w, d), P(w|d), P(w|BG) 先算好供後面算 term weight 使用。為了加速運算，決定還是減少單字的數量，只取出現次數遞減取前 10000 個單字，再把 query 的字也加進去。  PLSA 模型參數調整   PLSA term weight 公式：\n$P\\left ( q|d_{j} \\right ) \\approx \\prod_{ i= 1}^{|q|} P{}'\\left ( q|d_{j} \\right )$\n$P{}'\\left ( q|d_{j} \\right ) = \\alpha \\cdot P\\left ( w_{i} | d_{j} \\right ) + \\beta \\cdot \\sum_{k=1}^{K} P\\left ( w_{i} | T_{k} \\right )P\\left ( T_{k} | d_{j} \\right ) + (1 -\\alpha -\\beta ) \\cdot P\\left ( w_{i} | BG \\right )$\n  最終使用參數（Kaggle Public Score: 0.58052）：\n K = 48 / alpha = 0.65 / beta = 0.2    使用的參數對照分數表現圖  參數對照分數表現圖 \n  模型運作原理 PLSA 跟 LSA 的差別在加入的機率的概念，，讓我們可以將單詞對應到主題，再從主題對應到文章，使用兩層的機率分佈對整個樣本空間建模，其中使用 EM-Algorithm 將 P(w|T) 和 P(T|d) 重複進行 E-step 和 M-Step 直到算出的 log-likelihood 收斂到某個值。\n PLSA 模型圖 \nPLSA 的優點在透過找出潛在的主題分類解決了在 query index term 發生「一詞多義」或「同義詞」的問題，讓搜尋結果更好，而缺點在於隨著 document 和 index term 數量增加，訓練參數也得線性增加，且 PLSA 針對新文件的 fold-in 效果比較不好。\n個人心得 \u0008　作業一開始都沒有過 baseline，後來第二週老師給了沒有加入 PLSA 的參數，我直接先以那個 baseline 為目標，因為沒有加入 PLSA，所以一開始就只有算 query 的 index term (226 個)，來到了 0.53374，但是跟別人做一樣的方式，別人竟然 0.54055，比較之後發現，實作 background language model 的時候把長度也縮減了，應該不在 query 的字也要算進去，修正後就直接超過了 8-Topic 的 baseline。\n　接著實作 PLSA 的部分，但效果都比之前的還要爛，中間還一度發現自己的 P(w|T) random initial 實作錯誤，後來只使用 query index term 去分類主題的效果並不好，PLSA 的特性就是會找出同義詞的情況，如果不把其他 document 的單字考慮進去，應該沒什麼效果，於是就把 Lexicon 開始擴增到 10020，但是效果並不大，所以就開始調整alpha 和 \u0008beta，最後發現 alpha: 0.65-0.8, beta: 0.1-0.25, iter 30 次的效果是最好的，所以後面就把 topic 往上增加，也都維持用這個參數的範圍做測試。\n　最後 topic 設為 48，我也把每個分類的前 10 名的單字調出來看，發現有一些分類真的是有效果的，這時候才覺得自己的實作是正確的。\nTopic 1 (research): research develop scienc amp scientist univers new year institut scientif Topic 10 （family）: women say would one children like time mother child life Topic 17 (finance): per bank dollar cent market rate year price fund stock Topic 45 (ocean): sea island fish ship said water border area whale vietnam 　這邊也有發現有一些單詞應該是可以設為停用字的，像是長度只有1個字（c, u, 1, 2, 3\u0026hellip;）但寫報告的時候才想到要調單字出來看，所以就來不及實作了\nTopic 0 : c lab poll ms hold ld swing maj 3 david Topic 7 : 1 2 research 3 4 1993 1992 1991 5 use Topic 24 : report state u accord unit intern million firm govern korea Topic 41 : 1 2 3 5 4 6 0 8 7 9 ","date":"2020-11-26T00:00:00Z","image":"https://blog.jeffery.tk/p/ir-homework4/qITG12G_hu1dffc869e1d64a4036e5075742de8ba2_29927_120x120_fill_box_smart1_2.png","permalink":"https://blog.jeffery.tk/p/ir-homework4/","title":"PLSA"},{"content":"Kaggle competitions  2020: Information Retrieval and Applications\nHomework2: Best Match Models\nhttps://www.kaggle.com/c/2020-information-retrieval-and-applications-hw2\n Github code  https://github.com/chiachun2491/NTUST_IR/tree/master/homework2\n Homework report 使用的 tool Python, Jupyter, numpy, dataframe, datetime\n資料前處理  將 doc_list.txt 和 query_list.txt 讀檔進來後，之後將每個 doc 和 query 都使用 split() 儲存起來。 跟上次 Vector Space Model 的作業一樣，在生成 Lexicon 時只看 query_list 切完的所有詞並放到 set 中來生成，這樣能把 Lexicon 的維度從 59680 降到僅 123 而已。 跟上次作業相同先將 document term-frequency, query term-frequency, inverse document frequency 先算好供後面算 BM25 term weight 使用。  BM25 模型參數調整  BM25 term weight 公式：  $$sim_{BM25}\\left (d_{j}, q \\right ) \\equiv \\sum_{w_{j}\\in \\left ( d_{j} \\cap q \\right )}^{} IDF(w_{j}) \\times \\frac{ \\left ( K_{1} + 1 \\right ) \\times tf_{i,j}}{K_{1} [\\left ( 1 - b \\right ) + b \\times \\frac{len\\left ( d_{j} \\right )}{avg_{doclen}}] + tf_{i,j}} \\times \\frac{\\left ( K_{3} + 1 \\right ) \\times tf_{i,q}}{ K_{3} + tf_{i,q}}$$\n IDF 公式：  $$IDF(w_{j}) = log\\left ( \\frac{N - n_{i} + 0.5}{n_{i} + 0.5} \\right )$$\n 最終使用參數（Kaggle Public Score: 0.71854）：  K1 = 0.28 K3 = 1000 b = 0.85 avg_doclen = 611.3953710331663   使用的參數對照分數表現圖  參數對照分數表現圖   模型運作原理 BM25 跟 VSM 最大的差異在於多處理了 Document Length Normalization，讓 tf 的重要程度不會直接線性成長，一個字在出現過多次後，已經不會得到更多的分數，一樣的 tf 在較長文章的重要度會低於較短文章。\n個人心得 在一開始寫作業的時候，算好了 average document length，但是實際在計算 term weight 公式的時候忘記放進去，導致 kaggle 的分數都卡在 0.64 多，後來才發現自己耍蠢忘記除，一開始就先按照簡報上設 b 為 0.75，但都還是沒過 baseline 後，決定上調看看，到 0.8 後就過了 baseline，後來嘗試了調整 K1，發現沒有太大的幅度，K3 項後來我直接捨棄，因為試過幾次沒有含 K3 的分數都一模一樣，這次作業比較晚開始寫，所以也沒有測到很多參數，後來就繼續往上調到 b = 0.85 後，就有比較明顯的進\u0008展，雖然跟大家比還是差很多，中間有試過調整看看在算 IDF 取 log 前 +1，但是試過效果都更差，所以後來就還是用簡報上的公式，但後來想想也有可能是沒有找到適合的參數才對，搞不好分數會更高。\n","date":"2020-11-05T00:00:00Z","permalink":"https://blog.jeffery.tk/p/ir-homework2/","title":"Best Match Model 25 (BM25)"},{"content":"Kaggle competitions  2020: Information Retrieval and Applications\nHomework1: Vector Space Model\nhttps://www.kaggle.com/c/2020-information-retrieval-and-applications/\n Github code  https://github.com/chiachun2491/NTUST_IR/tree/master/homework1\n Homework report 使用的 tool Python, Jupyter, numpy, dataframe, sklearn.metrics.pairwise.cosine_similarity, datetime\n資料前處理 一開始我將 doc_list 和 query_list 讀檔進來後，之後將每個 doc 和 query 都使用 split() 儲存起來，並將這些 list 放到 set 中製作 dictionary，這邊做了一個小偷吃步，直接把 dictionary 的範圍縮小到只看所有 query 出現過的字，把 dictionary 的維度從 59680 降到了 123 而已。\n模型參數調整 我的 document 和 query 的 term weight 都是使用此公式：\n$$tf_{i,j} \\times log(1+\\frac{N+1}{n_{i}+1})$$\n模型運作原理 vector space model 會給出一個 doc 或 query 對應到所有 dictionary 中的向量，所以我們使用一個 doc 的向量和 query 的向量去做 cosine similarity，我們就可以得到兩者間的相似程度，所以我們將所有 doc 的向量都跟 query 的向量算過相似度後，我們就可以從高排到低找出跟該 query 最相關的 doc。\n個人心得 一開始模仿 sklearn 套件的公式，算出來的結果剛好超過 baseline 一些些，但大家的分數都蠻高的，所以請教別人後才知道有只看 query 出現過的字這個偷吃步的方法，除了讓程式效率變高之外，也讓我的分數往上不少。\n","date":"2020-10-25T00:00:00Z","permalink":"https://blog.jeffery.tk/p/ir-homework1/","title":"Vector Space Model"},{"content":"題目說明 Give an efficient algorithm to determine whether or not a directed graph is singly connected.\n 螢幕輸入 First line is N, denotes the amount of test case, then there are Ns graph data followed by N. Second line is V, each graph data is composed of V (the number of vertices, \u0026lt;= 1000). Third line is E, the number of edges, it does no size limitation, then followed by Es edges which are denoted by pair of vertex (e.g., 2 4 is vertex 2-\u0026gt;4, the first vertex number is 0 of all the vertex). Each vertex is an integer in [0, n-1], also notes that the input edge is not ordered by the start vertex.\n螢幕輸出 If the input graph is singly connected, output the ”YES”, or “NO” if not.\nThe test case number should be printed before the answer.\nExample 螢幕輸入: 2 6 8 0 1 0 4 1 2 2 0 2 1 3 2 4 5 5 4 3 3 0 1 1 2 2 0 螢幕輸出: 1 NO 2 YES  題目解析 Singly Connected 的定義是任兩點只有一條路徑能到達。\n於是我們利用 DFS 的特性下去處理，當如果做完的 DFS 的 Graph 中有出現 forward edge 或是 cross edge 的話，表示兩點間有其他路徑存在，則 Singly Connected 不成立。\n因此我們要以每個點為 root 開始走訪過一次 DFS，看是否在每個情況中是否都不會出現 forward edge 和 cross edge，Singly Connected 才成立。\n在 DFS 中提到，當我們第一次走訪 edge (u, v)，我們可以從v點來得知該 edge 的特性：\n 若 v 點為白色：表示該 edge 為 tree edge（灰底線）。 若 v 點為灰色：表示該 edge 為 back edge（B）。 若 v 點為黑色：表示該 edge 為 forward（F）或 cross（C）edge。    測資 1 中以點 3 為 DFS 起點，並出現 cross edge 和重複路徑\n  測資 2 中以點 0 為 DFS 起點，並無出現重複路徑\n因此我們知道如何判斷 Graph 中是否有 forward edge 或是 cross edge，我們稍微修改基本 DFS 的流程，當我們在走訪該點所連接的其他點的過程中，如果發現點是白色的話，我們會紀錄 parent 和再呼叫一次 DFS Visit。\n在這裡我們加上另一種情況，也就是用來判斷是否為 forward 或 cross edge 的情況，當點是黑色的話，我們回傳 FALSE，並中斷遞迴回到主程式，加快程式。\n程式碼 // main.cpp // Student ID: B10615043 // Date: May 30, 2019 // Last Update: May 30, 2019 // Problem statement: This C++ program for singly connected problem. #include \u0026lt;iostream\u0026gt;#include \u0026lt;vector\u0026gt; using namespace std; struct node { int color = 0; // 0 = white; 1 = gray; 2 = black;  int parent = -1; // -1 = NULL;  int discover = 0; // discover time  int finish = 0; // finish time  vector\u0026lt;int\u0026gt; adj; // adjacencyList }; bool DFS_Visit(node* G, int uIndex, int \u0026amp;time); int main() { int N; // input total case number  while (cin \u0026gt;\u0026gt; N) { for (int i = 0; i \u0026lt; N; i++) { // flag to record this graph singly connected or not  bool singly = true; int V; // input Vertex amount  cin \u0026gt;\u0026gt; V; // create Vector list  node *list = new node[V]; int E; // input Edge amount  cin \u0026gt;\u0026gt; E; for (int j = 0; j \u0026lt; E; j++) { int a, b; // input connect vertex info to adjacency list  cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; list[a].adj.push_back(b); } int time = 0; // consider all vertex begin to DFS condition  for (int j = 0; j \u0026lt; V; j++) { // reset all vertex info but adjacency list  for (int k = 0; k \u0026lt; V; k++) { list[k].color = 0; list[k].parent = -1; list[k].finish = 0; list[k].discover = 0; } // call DFS_Visit Function to determine singly connected  singly = DFS_Visit(list, j, time); // if already not singly connected break the loop  if (singly == false) break; } // output case number and singly connect or not  if (singly) cout \u0026lt;\u0026lt; i + 1 \u0026lt;\u0026lt; \u0026#34; YES\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; i + 1 \u0026lt;\u0026lt; \u0026#34; NO\u0026#34; \u0026lt;\u0026lt; endl; // delete list to free memory  delete[] list; } } return 0; } // Based on Slide Page 45 DFS-VISIT(G, u) bool DFS_Visit(node* G, int u, int \u0026amp; time) { // while vertex u has just discovered  time = time + 1; G[u].discover = time; // set the color white to gray  G[u].color = 1; for (int i = 0; i \u0026lt; G[u].adj.size(); i++) { // explore edge (u, v)  int v = G[u].adj[i]; // if edge is tree edge  if (G[v].color == 0) { // set parent and go on DFS-Visit  G[v].parent = u; // if return false then also return false to speed up program  if (!DFS_Visit(G, v, time)) return false; } // if edge is forward or cross edge then return false  else if (G[v].color == 2) { return false; } } // blacken u, it is finished  G[u].color = 2; time = time + 1; G[u].finish = time; // success DFS visit(G, u) no encounter forward or cross edge return true  return true; } Pseudo code // Based on Slide Page 45 DFS-VISIT(G, u) bool DFS_Visit(node* G, int u, int \u0026amp; time) // while vertex u has just discoverd  time = time + 1 G[u].discover = time // set the color white to gray  G[u].color = GRAY for each v in G[u].adj[] // if edge is tree edge  if (G[v].color == WHITE) // set parent and go on DFS-Visit  G[v].parent = u // if return false then also return false to speed up program  if (!DFS_Visit(G, v, time)) return false end if // if edge is forward or cross edge then return false  else if (G[v].color == 2) return false end if // blacken u, it is finished  G[u].color = BLACK time = time + 1 G[u].finish = time // success DFS visit(G, u) no encounter forward or cross edge return true  return true ","date":"2019-05-30T00:00:00Z","image":"https://blog.jeffery.tk/p/singly-connected-problem/vIQLtsy_huc152c653de18f942c8476d94e8e99140_70856_120x120_fill_box_smart1_2.png","permalink":"https://blog.jeffery.tk/p/singly-connected-problem/","title":"Singly Connected Problem"}]